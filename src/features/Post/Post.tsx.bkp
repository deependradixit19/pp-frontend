import { FC, useEffect, useState, useRef } from 'react';
import './_post.scss';
import { InfiniteData, useMutation, useQueryClient } from 'react-query';
import { Carousel } from 'react-responsive-carousel';
import ReactPlayer from 'react-player';
import { useUserContext } from '../../context/userContext';
import { useModalContext } from '../../context/modalContext';

import { IInfinitePage, IPost } from '../../types/interfaces/ITypes';
import { IProfile } from '../../types/interfaces/IProfile';
import { AllIcons } from '../../helpers/allIcons';

import { usePreviewContext } from '../../context/previewContext';

import { subscribeToUser } from '../../services/endpoints/profile';

import OptionsDropdown from './components/OptionsDropdown/OptionsDropdown';
import PostActions from './components/PostActions';
import AvatarHolder from '../../components/UI/AvatarHolder/AvatarHolder';
import FriendRequestModal from '../../components/UI/Modal/FriendRequest/FriendRequestModal';
import Button from '../../components/UI/Buttons/Button';
import SubscribeModal from '../../components/UI/Modal/Subscribe/SubscribeModal';

import placeholderAvatar from '../../assets/images/user_placeholder.png';
import placeholderCover from '../../assets/images/home/cover_placeholder.png';
import { purchasePremiumPost } from '../../services/endpoints/posts';
import { someTimeAgo } from '../../helpers/timeFormat';
import * as SvgIcons from '../../assets/svg/sprite';
import ShowMore from '../../components/Common/ShowMore/ShowMore';
import { useAnswerPoll, useLikePost } from '../../helpers/hooks';
import StatsPopup from '../../components/UI/StatsPopup/StatsPopup';
import { IFile } from '../../types/interfaces/IFile';
import PostPoll from './components/PostPoll';
import AudioMessage from '../../components/UI/AudioMessage/AudioMessage';

// interface InfiniteData<TData> {
//   pages: TData[];
//   pageParams: unknown[];
// }

// interface IInfinitePage {
//   nextCursor: number | undefined;
//   page: {
//     data: { data: IPost[] };
//   };
// }

const Post: FC<{
  postNumber: number;
  data: IPost;
  refetchFeed: () => void;
  user: IProfile;
  allPosts?: Array<any>;
  isHomeFeed?: boolean;
  dataQuery: any[];
}> = ({
  postNumber,
  data,
  refetchFeed,
  user,
  allPosts,
  isHomeFeed = false,
  dataQuery,
}) => {
  const [allFiles, setAllFiles] = useState<IFile[]>([]);
  const [statsOpen, setStatsOpen] = useState<boolean>(false);
  const [like, setLike] = useState<{
    status: boolean;
    count: number;
  }>({
    status: false,
    count: 0,
  });
  const [counter, setCounter] = useState<{ [key: string]: number | null }>({
    imgs: 0,
    img: 0,
    vids: 0,
    vid: 0,
  });
  const [activeFile, setActiveFile] = useState<string>('');
  const [videoPlaying, setVideoPlaying] = useState<boolean>(false);
  const [price, setPrice] = useState<number>(20);

  const [isOptionsNavOpen, setIsOptionsNavOpen] = useState<boolean>(false);

  const previewData = usePreviewContext();
  const userData = useUserContext();
  const modalData = useModalContext();
  const queryClient = useQueryClient();

  const videoPlayerRef = useRef<any>(null);

  useEffect(() => {
    if (data) {
      let allData: IFile[] = [];
      if (data.is_purchased) {
        allData = [...data.photos, ...data.videos, ...data.sounds].sort(
          (a, b) => a.order - b.order
        );
        setAllFiles(allData);
      } else {
        setAllFiles([]);
      }
      setLike({
        status: data.isLiked,
        count: data.likes_count,
      });

      if (allData?.length > 0) {
        if (allData[0].url.includes('/image')) {
          setCounter({
            imgs: data.photos.length > 0 ? data.photos.length : null,
            img: data.photos.length > 0 ? 1 : null,
            vids: data.videos.length > 0 ? data.videos.length : null,
            vid: data.videos.length > 0 ? 0 : null,
          });
          setActiveFile('img');
        } else {
          setCounter({
            imgs: data.photos.length > 0 ? data.photos.length : null,
            img: data.photos.length > 0 ? 0 : null,
            vids: data.videos.length > 0 ? data.videos.length : null,
            vid: data.videos.length > 0 ? 1 : null,
          });
          setActiveFile('vid');
        }
      }
    }
  }, [data]);

  const cachedData =
    queryClient.getQueryData<InfiniteData<IInfinitePage>>(dataQuery);

  const onLikeMutate = () => {
    if (cachedData) {
      const newLikeState = data.isLiked ? 'unlike' : 'like';
      const newData = {
        ...cachedData,
        pages: cachedData.pages.map((singleFeedPage) => {
          return {
            ...singleFeedPage,
            page: {
              ...singleFeedPage.page,
              data: {
                ...singleFeedPage.page.data,
                data: singleFeedPage.page.data.data.map((post) =>
                  post.id === data.id
                    ? {
                        ...post,
                        isLiked: !post.isLiked,
                        likes_count:
                          newLikeState === 'like'
                            ? post.likes_count + 1
                            : post.likes_count - 1,
                      }
                    : post
                ),
              },
            },
          };
        }),
      };
      queryClient.setQueryData(dataQuery, newData);
    }
  };
  const onPollAnswerMutate = () => {
    if (cachedData) {
      const newData = {
        ...cachedData,
        pages: cachedData.pages.map((singleFeedPage) => {
          return {
            ...singleFeedPage,
            page: {
              ...singleFeedPage.page,
              data: {
                ...singleFeedPage.page.data,
                data: singleFeedPage.page.data.data.map((post) => {
                  return post;
                }),
              },
            },
          };
        }),
      };
      queryClient.setQueryData(dataQuery, newData);
    }
  };

  const onMutateError = () => {
    queryClient.setQueryData(dataQuery, cachedData);
  };

  const onLikeSettled = () => {
    queryClient.invalidateQueries(dataQuery);
  };
  const { likePost } = useLikePost(
    data.id,
    onLikeMutate,
    onMutateError
    // onLikeSettled
  );
  const { setPollAnswer } = useAnswerPoll({});

  const purchasePost = useMutation(
    (postId: number) => {
      return purchasePremiumPost(postId);
    },
    {
      onSettled: () => {
        queryClient.invalidateQueries(dataQuery);
      },
    }
  );

  const subscribeTouser = useMutation((newSub: { id: number; opt: number }) =>
    subscribeToUser(newSub.id, newSub.opt)
  );

  const whoIsWatchingThePost = () => {
    if (userData.id === user.id && userData.role === 'model') {
      return 'model';
    } else if (
      userData.id !== user.id &&
      userData.role === 'model' &&
      user.friends === 'Friends'
    ) {
      return 'model-on-friend';
    } else if (userData.id !== user.id && userData.role === 'model') {
      return 'model-on-model';
    } else if (user.isSubscribed) {
      return 'subscribed-user';
    } else {
      return 'user';
    }
  };

  const openComments = (
    postId: number,
    activeFile: string,
    postData: IPost
    // commentCount: number,
  ) => {
    if (activeFile === 'img') {
      previewData.addModal(
        postNumber,
        0,
        'photo',
        postData,
        isHomeFeed ? 'home' : 'profile'
      );
    } else if (activeFile === 'vid') {
      previewData.addModal(
        postNumber,
        0,
        'video',
        postData,
        isHomeFeed ? 'home' : 'profile'
      );
    } else {
      previewData.addModal(
        postNumber,
        0,
        'text',
        postData,
        isHomeFeed ? 'home' : 'profile'
      );
    }
    // previewData.setActiveCommentsPostId(postId);
    previewData.setCommentsActive(true);
    previewData.handleMinimize(false);
  };

  const renderTags = () => {
    return (
      <>
        <div className="post-top-tags-container">
          <div className="post-top-tag-wrapper">
            <div className="post-top-tag">Live Stream Ended</div>
          </div>

          <div className="post-top-tag-wrapper">
            <div className="post-top-tag post-top-tag-live">Live</div>
          </div>
        </div>
        <div className="post-bottom-tags-container">
          {/* <div className='post-top-tag-wrapper'>
            <div className='post-top-tag post-top-tag-live'>Live</div>
          </div> */}
        </div>
      </>
    );
  };

  const renderSounds = () => {
    if (data.sounds.length) {
      return (
        <div className="post-sound-container">
          {data?.sounds.map((sound: any) =>
            sound.url ? (
              <AudioMessage
                audioBlob={sound.url}
                waveColor="gray"
                waveBackgroundColor="transparent"
                key={sound.id}
              />
            ) : null
          )}
        </div>
      );
    }
    return null;
  };

  return (
    <div className="post">
      <div className="post__files">
        {statsOpen && <StatsPopup closeStats={() => setStatsOpen(false)} />}
        <div
          className="post__options-nav"
          onClick={() => {
            setIsOptionsNavOpen(true);
          }}
        >
          <SvgIcons.IconThreeDots />
        </div>

        <OptionsDropdown
          role={whoIsWatchingThePost()}
          hasVid={!!allFiles.find((file: IFile) => file.url.includes('/video'))}
          isOptionsNavOpen={isOptionsNavOpen}
          setIsOptionsNavOpen={setIsOptionsNavOpen}
          postId={data.id}
        />
        <PostActions
          like={like}
          likePost={() => likePost.mutate()}
          price={data?.price}
          isPurchased={data?.is_purchased}
          counter={counter}
          activeFile={activeFile}
          avatar={user?.cropped_cover.url || user?.avatar.url}
          hasTip={true}
          hasComments={true}
          comments={data.comment_count}
          hasGraph={true}
          graph={332}
          whoIsWatching={whoIsWatchingThePost()}
          openStats={() => setStatsOpen(true)}
          openComments={() => openComments(data.id, activeFile, data)}
        />

        {data?.price && !data?.is_purchased ? (
          <div
            className="post__placeholder__mom"
            style={{ backgroundImage: `url(${placeholderCover})` }}
          >
            <img src={AllIcons.post_lock_outline} alt="Post locked" />
            {user.isSubscribed || isHomeFeed ? (
              <Button
                text="Purchase"
                color="black"
                font="mont-14-bold"
                height="3"
                width="fit"
                padding="2"
                customClass="post__placeholder__mom__button"
                clickFn={() => purchasePost.mutate(data?.id)}
              />
            ) : user.friends === 'Friends' ? (
              <Button
                text="Purchase"
                color="black"
                font="mont-14-bold"
                height="3"
                width="fit"
                padding="2"
                customClass="post__placeholder__mom__button"
                clickFn={() => purchasePost.mutate(data?.id)}
              />
            ) : (
              <Button
                text="Subscribe"
                color="black"
                font="mont-14-bold"
                height="3"
                width="fit"
                padding="2"
                customClass="post__placeholder__mom__button"
                clickFn={() =>
                  modalData.addModal(
                    'Subscribe',
                    <SubscribeModal
                      id={user.id}
                      avatar={user?.cropped_avatar.url || user?.avatar.url}
                      cover={user?.cropped_cover.url || user?.cover.url}
                      display_name={user?.display_name}
                      username={user?.username}
                      isSubscribed={user?.isSubscribed}
                      subscribe={(id: number, opt: number) =>
                        subscribeTouser.mutateAsync({ id, opt })
                      }
                      price={price}
                    />
                  )
                }
              />
            )}

            <p className="post__placeholder__mom__text">
              to see <b>{data?.user?.username}'s</b> posts
            </p>
          </div>
        ) : null}

        {!data?.price &&
        !user.isSubscribed &&
        whoIsWatchingThePost() === 'model-on-model' &&
        user.friends !== 'Friends' ? (
          <div
            className="post__placeholder__mom"
            style={{ backgroundImage: `url(${placeholderCover})` }}
          >
            <img src={AllIcons.post_lock_outline} alt="Post locked" />
            <Button
              text="Add Friend"
              color="black"
              font="mont-14-bold"
              height="3"
              width="fit"
              padding="2"
              customClass="post__placeholder__mom__button"
              clickFn={() =>
                modalData.addModal(
                  'Friend Request',
                  <FriendRequestModal
                    id={user.id}
                    online={user?.online_status}
                    avatar={user?.avatar.url || user?.cropped_avatar.url}
                    display_name={user?.display_name}
                    username={user?.username}
                    follower_count={user?.follower_count}
                    friend_count={user?.friend_count}
                    close={() => modalData.clearModal()}
                  />
                )
              }
            />
            <p className="post__placeholder__mom__text">
              to see <b>{user.username}'s</b> posts
            </p>
          </div>
        ) : null}

        {!data?.price &&
        !user?.isSubscribed &&
        !isHomeFeed &&
        whoIsWatchingThePost() === 'user' ? (
          <div
            className="post__placeholder__mom"
            style={{ backgroundImage: `url(${placeholderCover})` }}
          >
            <img src={AllIcons.post_lock_outline} alt="Post locked" />
            <Button
              text="Subscribe"
              color="black"
              font="mont-14-bold"
              height="3"
              width="fit"
              padding="2"
              customClass="post__placeholder__mom__button"
              clickFn={() =>
                modalData.addModal(
                  'Subscribe',
                  <SubscribeModal
                    id={user.id}
                    avatar={user?.cropped_avatar.url || user?.avatar.url}
                    cover={user?.cropped_cover.url || user?.cover.url}
                    display_name={user?.display_name}
                    username={user?.username}
                    isSubscribed={user?.isSubscribed}
                    subscribe={(id: number, opt: number) =>
                      subscribeTouser.mutate({ id, opt })
                    }
                    price={price}
                  />
                )
              }
            />
            <p className="post__placeholder__mom__text">
              to see <b>{user.username}'s</b> posts
            </p>
          </div>
        ) : null}

        {(user.isSubscribed && !data.price) ||
        (user.friends === 'Friends' && !data.price) ||
        (isHomeFeed && !data.price) ||
        (isHomeFeed && data.price && data.is_purchased) ||
        (user.isSubscribed && data?.is_purchased) ||
        whoIsWatchingThePost() === 'model' ? (
          <>
            {!!allFiles.length ? (
              <>
                {allFiles.length === 1 &&
                allFiles[0].url.includes('/sounds') ? (
                  <div
                    className={`post__files__file post__files__file--sound`}
                    // onClick={() => {
                    //   if (previewData.minimized) {
                    //     previewData.updateSelectedPost(
                    //       postNumber,
                    //       'sound',
                    //       data,
                    //       isHomeFeed ? 'home' : 'profile'
                    //     );
                    //     previewData.handleMinimize(false);
                    //   } else {
                    //     previewData.addModal(
                    //       postNumber,
                    //       'sound',
                    //       data,
                    //       isHomeFeed ? 'home' : 'profile'
                    //     );
                    //   }
                    // }}
                  >
                    {renderSounds()}
                  </div>
                ) : (
                  <div className="post-tags-wrapper">
                    <Carousel
                      axis="horizontal"
                      autoPlay={true}
                      interval={600000}
                      showArrows={true}
                      showIndicators={false}
                      infiniteLoop={true}
                      showThumbs={false}
                      showStatus={false}
                      className="post__files__carousel"
                      onChange={(key) => {
                        if (allFiles[key].url.includes('/image')) {
                          setActiveFile('img');
                          setCounter({
                            ...counter,
                            img:
                              allFiles
                                .filter((item: any) =>
                                  item.url.includes('/image')
                                )
                                .indexOf(allFiles[key]) + 1,
                          });
                        } else {
                          setActiveFile('vid');
                          setCounter({
                            ...counter,
                            vid:
                              allFiles
                                .filter((item: any) =>
                                  item.url.includes('/video')
                                )
                                .indexOf(allFiles[key]) + 1,
                          });
                        }
                      }}
                    >
                      {allFiles.map((file: IFile, key: number) => {
                        if (file.url.includes('/image')) {
                          return (
                            <div
                              key={key}
                              className={`post__files__file ${
                                !allFiles.find((file: IFile) =>
                                  file.url.includes('/video')
                                )
                                  ? 'post__files__file--img'
                                  : ''
                              }`}
                              onClick={() => {
                                if (previewData.minimized) {
                                  previewData.updateSelectedPost(
                                    postNumber,
                                    key,
                                    'photo',
                                    data,
                                    isHomeFeed ? 'home' : 'profile'
                                  );
                                  previewData.handleMinimize(false);
                                } else {
                                  previewData.addModal(
                                    postNumber,
                                    key,
                                    'photo',
                                    data,
                                    isHomeFeed ? 'home' : 'profile'
                                  );
                                }
                              }}
                            >
                              <img src={file.url} alt="Post file" />
                            </div>
                          );
                        } else if (file.url.includes('/image')) {
                          return (
                            <div
                              key={key}
                              className={`post__files__file ${
                                !allFiles.find((file: IFile) =>
                                  file.url.includes('/video')
                                )
                                  ? 'post__files__file--img'
                                  : ''
                              }`}
                              onClick={() => {
                                if (previewData.minimized) {
                                  previewData.updateSelectedPost(
                                    postNumber,
                                    key,
                                    'photo',
                                    data,
                                    isHomeFeed ? 'home' : 'profile'
                                  );
                                  previewData.handleMinimize(false);
                                } else {
                                  previewData.addModal(
                                    postNumber,
                                    key,
                                    'photo',
                                    data,
                                    isHomeFeed ? 'home' : 'profile'
                                  );
                                }
                              }}
                            >
                              <img src={file.url} alt="Post file" />
                            </div>
                          );
                        } else if (file.url.includes('/video')) {
                          return (
                            <div
                              key={key}
                              className="post__files__file"
                              onClick={() => {
                                if (previewData.minimized) {
                                  previewData.updateSelectedPost(
                                    postNumber,
                                    key,
                                    'video',
                                    data,
                                    isHomeFeed ? 'home' : 'profile'
                                  );
                                  previewData.handleMinimize(false);
                                } else {
                                  previewData.addModal(
                                    postNumber,
                                    key,
                                    'video',
                                    data,
                                    isHomeFeed ? 'home' : 'profile'
                                  );
                                }
                              }}
                            >
                              <ReactPlayer
                                width="100%"
                                height="100%"
                                url={file.url}
                                controls={false}
                                playing={videoPlaying}
                                onPlay={() => setVideoPlaying(true)}
                                onEnded={() => setVideoPlaying(false)}
                                ref={videoPlayerRef}
                              />
                              {videoPlayerRef?.current ? (
                                <div className="post__files__file__duration">
                                  {videoPlayerRef?.current?.getDuration()}
                                </div>
                              ) : (
                                ''
                              )}
                              <div
                                className="post__files__file__play"
                                onClick={(e: any) => {
                                  e.stopPropagation();
                                  setVideoPlaying(!videoPlaying);
                                }}
                              >
                                {videoPlaying ? (
                                  <img src={AllIcons.video_pause} alt="Pause" />
                                ) : (
                                  <img src={AllIcons.post_play} alt="Play" />
                                )}
                              </div>
                            </div>
                          );
                        } else {
                          return <div key={key}>other</div>;
                        }
                      })}
                    </Carousel>
                    {renderSounds()}
                  </div>
                )}
              </>
            ) : data.poll ? (
              <div
                style={{
                  backgroundImage: data?.poll?.background_color
                    ? data?.poll?.background_color
                    : `url(${data?.poll?.background_src})`,
                }}
                className={`post__files__file post__files__file--poll`}
                onClick={() => {
                  if (previewData.minimized) {
                    previewData.updateSelectedPost(
                      postNumber,
                      0,
                      'poll',
                      data,
                      isHomeFeed ? 'home' : 'profile'
                    );
                    previewData.handleMinimize(false);
                  } else {
                    previewData.addModal(
                      postNumber,
                      0,
                      'poll',
                      data,
                      isHomeFeed ? 'home' : 'profile'
                    );
                  }
                }}
              >
                <PostPoll
                  pollData={data.poll}
                  setAnswer={(ans) =>
                    setPollAnswer.mutate(ans, {
                      onSettled: () => queryClient.invalidateQueries(dataQuery),
                    })
                  }
                  isMyPost={user.id === data.user_id}
                />
              </div>
            ) : (
              <div
                className={`post__files__file post__files__file--img post__files__file--no-media`}
                onClick={() => {
                  if (previewData.minimized) {
                    previewData.updateSelectedPost(
                      postNumber,
                      0,
                      'text',
                      data,
                      isHomeFeed ? 'home' : 'profile'
                    );
                    previewData.handleMinimize(false);
                  } else {
                    previewData.addModal(
                      postNumber,
                      0,
                      'text',
                      data,
                      isHomeFeed ? 'home' : 'profile'
                    );
                  }
                }}
              >
                <p>{data.body}</p>
              </div>
            )}
            {/* {renderSounds()} */}
            <div className="post__info">
              <div className="post__info__body">
                <AvatarHolder
                  img={
                    user?.cropped_cover.url ||
                    user?.avatar.url ||
                    placeholderAvatar
                  }
                  size="50"
                />
                <ShowMore
                  customClass="post"
                  name={'Chomi'}
                  time={someTimeAgo(data.created_at)}
                  tags={['#bowieblue', '#bluechowchow']}
                  text={data.body ? data.body : ''}
                />
              </div>
            </div>
          </>
        ) : null}
      </div>
    </div>
  );
};

export default Post;
